{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AsyncSpotify \u00b6 Documentation Why should you use this library \u00b6 99% Code coverage Completely async Scales up to (theoretically) unlimited requests per second (this depends mostly on the spotify request limit) Customize the timeout, maximal simultaneous request Throws custom errors so you can catch a Token expiration or a rate limit violation easily Gets rid of the client credential workflow if you provide spotify cookies Good for automated testing Example \u00b6 For more in depth examples take a look here . from async_spotify import Preferences , SpotifyApiClient , SpotifyAuthorisationToken # Create a preferences object and load the preferences from env variables preferences = Preferences () preferences . load_from_env () # Create a new Api client and pass the preferences api = SpotifyApiClient ( preferences , hold_authentication = True ) # Get the auth token with your code code : str = \"Your Spotify Code\" auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) # Create a new client await api . create_new_client ( request_limit = 1500 ) # Start making queries with the internally saved token album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' ) # If you pass a valid auth_token this auth_token will be used for making the requests album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' , auth_token ) Run tests \u00b6 See here .","title":"Overview"},{"location":"#asyncspotify","text":"Documentation","title":"AsyncSpotify"},{"location":"#why-should-you-use-this-library","text":"99% Code coverage Completely async Scales up to (theoretically) unlimited requests per second (this depends mostly on the spotify request limit) Customize the timeout, maximal simultaneous request Throws custom errors so you can catch a Token expiration or a rate limit violation easily Gets rid of the client credential workflow if you provide spotify cookies Good for automated testing","title":"Why should you use this library"},{"location":"#example","text":"For more in depth examples take a look here . from async_spotify import Preferences , SpotifyApiClient , SpotifyAuthorisationToken # Create a preferences object and load the preferences from env variables preferences = Preferences () preferences . load_from_env () # Create a new Api client and pass the preferences api = SpotifyApiClient ( preferences , hold_authentication = True ) # Get the auth token with your code code : str = \"Your Spotify Code\" auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) # Create a new client await api . create_new_client ( request_limit = 1500 ) # Start making queries with the internally saved token album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' ) # If you pass a valid auth_token this auth_token will be used for making the requests album_tracks : dict = await api . albums . get_tracks ( '03dlqdFWY9gwJxGl3AREVy' , auth_token )","title":"Example"},{"location":"#run-tests","text":"See here .","title":"Run tests"},{"location":"EXAMPLES/","text":"Examples \u00b6 Getting started \u00b6 If you want to start connecting to the spotify api you have to create a new instance of the Preferences . These Preferences hold all sorts of configurations. from async_spotify import Preferences preferences = Preferences ( application_id = 'Your id' , application_secret = 'Your secret' , scopes = [ 'your' , 'scopes' ], redirect_url = 'your.redirect.utl' ) # You can also load the preferences from environment variables. # If the variable does not exist the existing value will not be overwritten. preferences . load_from_env () These created preferences have to be passed to the SpotifyApiClient . # Create new client api_client = SpotifyApiClient ( prefernces ) To get a code from Spotify the user has to agee to the scopes your app asks for. For this you create an authorization, let the user visit this url and read the code parameter in the spotify redirect. If you have some questions about this process read this spotify aritcle about it. # Build the authorization url for the users authorization_url : str = api_client . build_authorization_url ( show_dialog = True ) We will assue that you managed to get a code from spotify for a specific user. Now we have to excange the code for an authorization token and a refresh token. But before we make this we have to create a new client which will be internally used for all the request making. # Create a new client which will handle the request await api_client . create_new_client () # Exchange the code for the tokens auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) After we recieved the auth_token we can start making request. # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client () Endpoints \u00b6 Every Api Endpoint is represented as an instance variables of the SpotifyApiClient . Look here for every instance variable and the associated classes. # For the albums endpoint api_client . albums . whatever () # For the artist endpoint api_client . artist . whatever () Advanced Configuration \u00b6 If you don't want to pass the auth_token every time you make a request you can instruct the SpotifyApiClient to keep the token in memmory. Every time you refresh the token the in memmory token will be updated too. So you always have a valid token you can make requests with. If the token expires you will still have to refresh it yourself by calling the refresh_token method, which will returned the updated token. You dont have to pass a token to the method however if you want the internal token to be updated. In addition to that you can limit the simulatnious requests and the timout if you create a new client. api_client = SpotifyApiClient ( preferences , hold_authentication = True ) # And if you already have a auth_token you can pass this token to the constructor api_client = SpotifyApiClient ( preferences , hold_authentication = True , auth_token = auth_token ) # Make the requests without passing the auth_token every time album = await api_client . albums . get_one ( album_id ) # Limit the requests and the timeout await api_client . create_new_client ( request_limit = 1500 , request_timeout = 30 ) Exceptions \u00b6 There are multiple exception which could get raised by the SpotifyApiClient . Every exception inherits from the SpotifyBaseError so if you want to catch every spotify exception you can do it with the SpotifyBaseError . The SpotifyError exception gets raised for general usage errors The TokenExpired exception gets raised if the spotify token used for making an api call is expired The RateLimitExceeded exception gets raised if the raite limit is exceeded The SpotifyAPIError exception gets raised for general errors like a invalid album id Each of the exceptions implements the get_json() method which will return the follwing json: { error: { status: 0, message: '' } } The status is the HTTP status code and if not aplicable the number 0. The message is the reason something failed. try : album = await api_client . albums . get_one ( album_id ) except SpotifyAPIError as error : error = error . get_json () # Do something with the error message Code retrieval with a cookie \u00b6 Normally you have to get the code with the client credential workflow. If your user has already agreed to the scopes and you have the cookie of the user you can get rid of this process. This is mostely intended for testing purposes, but you could also use it in your production environment in the very unlikely edge case that you have the spotify cookie of your user. You start like normal and create a new SpotifyApiClient . preferences = Preferences () preferences . load_from_env () api_client = SpotifyApiClient ( preferences , hold_authentication = True ) # Create a new spotify cookie cookie = SpotifyCookie () # Load the cookie from a file (you can also use the constructor to pass the data) cookies . load_from_file ( 'Path/to/cookie.json' ) # Get the coke with the spotify cookie code = await api . get_code_with_cookie ( cookie ) # Use the retrieved code to get the auth token auth_token = await api . get_auth_token_with_code ( code ) album = await api_client . albums . get_one ( album_id ) await api_client . close_client () Format of the cookie.json { \"sp_t\" : \"a\" , \"sp_dc\" : \"b\" , \"sp_key\" : \"c\" }","title":"Examples"},{"location":"EXAMPLES/#examples","text":"","title":"Examples"},{"location":"EXAMPLES/#getting-started","text":"If you want to start connecting to the spotify api you have to create a new instance of the Preferences . These Preferences hold all sorts of configurations. from async_spotify import Preferences preferences = Preferences ( application_id = 'Your id' , application_secret = 'Your secret' , scopes = [ 'your' , 'scopes' ], redirect_url = 'your.redirect.utl' ) # You can also load the preferences from environment variables. # If the variable does not exist the existing value will not be overwritten. preferences . load_from_env () These created preferences have to be passed to the SpotifyApiClient . # Create new client api_client = SpotifyApiClient ( prefernces ) To get a code from Spotify the user has to agee to the scopes your app asks for. For this you create an authorization, let the user visit this url and read the code parameter in the spotify redirect. If you have some questions about this process read this spotify aritcle about it. # Build the authorization url for the users authorization_url : str = api_client . build_authorization_url ( show_dialog = True ) We will assue that you managed to get a code from spotify for a specific user. Now we have to excange the code for an authorization token and a refresh token. But before we make this we have to create a new client which will be internally used for all the request making. # Create a new client which will handle the request await api_client . create_new_client () # Exchange the code for the tokens auth_token : SpotifyAuthorisationToken = await api . get_auth_token_with_code ( code ) After we recieved the auth_token we can start making request. # Get information about an album album = await api_client . albums . get_one ( album_id , market = 'DE' , auth_token = auth_token ) # ... If you want to shut down your application and don't want to leak requests you have to call the close_client method of the api_client . # Close the client await api_client . close_client ()","title":"Getting started"},{"location":"EXAMPLES/#endpoints","text":"Every Api Endpoint is represented as an instance variables of the SpotifyApiClient . Look here for every instance variable and the associated classes. # For the albums endpoint api_client . albums . whatever () # For the artist endpoint api_client . artist . whatever ()","title":"Endpoints"},{"location":"EXAMPLES/#advanced-configuration","text":"If you don't want to pass the auth_token every time you make a request you can instruct the SpotifyApiClient to keep the token in memmory. Every time you refresh the token the in memmory token will be updated too. So you always have a valid token you can make requests with. If the token expires you will still have to refresh it yourself by calling the refresh_token method, which will returned the updated token. You dont have to pass a token to the method however if you want the internal token to be updated. In addition to that you can limit the simulatnious requests and the timout if you create a new client. api_client = SpotifyApiClient ( preferences , hold_authentication = True ) # And if you already have a auth_token you can pass this token to the constructor api_client = SpotifyApiClient ( preferences , hold_authentication = True , auth_token = auth_token ) # Make the requests without passing the auth_token every time album = await api_client . albums . get_one ( album_id ) # Limit the requests and the timeout await api_client . create_new_client ( request_limit = 1500 , request_timeout = 30 )","title":"Advanced Configuration"},{"location":"EXAMPLES/#exceptions","text":"There are multiple exception which could get raised by the SpotifyApiClient . Every exception inherits from the SpotifyBaseError so if you want to catch every spotify exception you can do it with the SpotifyBaseError . The SpotifyError exception gets raised for general usage errors The TokenExpired exception gets raised if the spotify token used for making an api call is expired The RateLimitExceeded exception gets raised if the raite limit is exceeded The SpotifyAPIError exception gets raised for general errors like a invalid album id Each of the exceptions implements the get_json() method which will return the follwing json: { error: { status: 0, message: '' } } The status is the HTTP status code and if not aplicable the number 0. The message is the reason something failed. try : album = await api_client . albums . get_one ( album_id ) except SpotifyAPIError as error : error = error . get_json () # Do something with the error message","title":"Exceptions"},{"location":"EXAMPLES/#code-retrieval-with-a-cookie","text":"Normally you have to get the code with the client credential workflow. If your user has already agreed to the scopes and you have the cookie of the user you can get rid of this process. This is mostely intended for testing purposes, but you could also use it in your production environment in the very unlikely edge case that you have the spotify cookie of your user. You start like normal and create a new SpotifyApiClient . preferences = Preferences () preferences . load_from_env () api_client = SpotifyApiClient ( preferences , hold_authentication = True ) # Create a new spotify cookie cookie = SpotifyCookie () # Load the cookie from a file (you can also use the constructor to pass the data) cookies . load_from_file ( 'Path/to/cookie.json' ) # Get the coke with the spotify cookie code = await api . get_code_with_cookie ( cookie ) # Use the retrieved code to get the auth token auth_token = await api . get_auth_token_with_code ( code ) album = await api_client . albums . get_one ( album_id ) await api_client . close_client () Format of the cookie.json { \"sp_t\" : \"a\" , \"sp_dc\" : \"b\" , \"sp_key\" : \"c\" }","title":"Code retrieval with a cookie"},{"location":"LICENCE/","text":"MIT License Copyright (c) 2020 HuiiBuh Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"STUFF/","text":"Tests \u00b6 Install dependencies \u00b6 pip install -r requirements.dev.txt pip install -r requirements.txt Run the tests in IntelliJ \u00b6 Run the tests in the console \u00b6 Go into the root directory of this project and run the following command pytest -s --cov = async_spotify src/test --cov-report = xml Build and Publish \u00b6 python3 setup.py sdist twine upload dist/* Generate Docs \u00b6 To generate the docs run PYTHONPATH=src mkdocs serve . To publish the docs run mkdocs gh-deploy","title":"Tests"},{"location":"STUFF/#tests","text":"","title":"Tests"},{"location":"STUFF/#install-dependencies","text":"pip install -r requirements.dev.txt pip install -r requirements.txt","title":"Install dependencies"},{"location":"STUFF/#run-the-tests-in-intellij","text":"","title":"Run the tests in IntelliJ"},{"location":"STUFF/#run-the-tests-in-the-console","text":"Go into the root directory of this project and run the following command pytest -s --cov = async_spotify src/test --cov-report = xml","title":"Run the tests in the console"},{"location":"STUFF/#build-and-publish","text":"python3 setup.py sdist twine upload dist/*","title":"Build and Publish"},{"location":"STUFF/#generate-docs","text":"To generate the docs run PYTHONPATH=src mkdocs serve . To publish the docs run mkdocs gh-deploy","title":"Generate Docs"},{"location":"private_api/request_handler/","text":"","title":"Request Handler"},{"location":"private_api/status_classes/","text":"","title":"Status Classes"},{"location":"private_api/url/","text":"","title":"URLS"},{"location":"public_api/authentification/","text":"","title":"Authentification"},{"location":"public_api/endpoints/","text":"","title":"Endpoints"},{"location":"public_api/preferences/","text":"","title":"Preferences"},{"location":"public_api/spotify_api_client/","text":"","title":"Spotify Api Client"},{"location":"public_api/spotify_errors/","text":"","title":"Spotify Errors"}]}